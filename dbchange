#!/bin/bash
set -e

echo "Starting X-UI Outbound Replacement (Robust Version)..."

# --- Configuration ---
XRAY_CONFIG_PATH="/usr/local/x-ui/bin/config.json"
XUI_SERVICE_NAME="x-ui"

# !!! URL فایل JSON حاوی لیست پروکسی‌ها برای تخصیص به سرورها !!!
PROXIES_DATA_URL="https://raw.githubusercontent.com/ProjectV2V/PPX/main/proxies_for_test.json" # از این برای گرفتن 5 پروکسی استفاده میشود

# !!! URL تمپلت config.json شما از گیت‌هاب !!!
# این را با لینک RAW فایل config_template.json خود جایگزین کنید.
CONFIG_TEMPLATE_URL="https://raw.githubusercontent.com/ProjectV2V/PPX/refs/heads/main/config_template.json" # <--- این خط را حتما جایگزین کنید

# --- Check for Prerequisites ---
echo "Checking for 'jq' and 'curl'..."
if ! command -v jq &> /dev/null; then
    echo "Error: 'jq' is not installed. Please install it manually or ensure it's available in your environment."
    exit 1
fi
if ! command -v curl &> /dev/null; then
    echo "Error: 'curl' is not installed. Please install it manually or ensure it's available in your environment."
    exit 1
fi

# --- Download Config Template ---
echo "Downloading config template from ${CONFIG_TEMPLATE_URL}..."
CONFIG_JSON_CONTENT=$(curl -s "$CONFIG_TEMPLATE_URL")
if [ -z "$CONFIG_JSON_CONTENT" ]; then
    echo "Error: Could not download config template from ${CONFIG_TEMPLATE_URL} or file is empty."
    exit 1
fi

# --- Download and Extract Proxies for this Server ---
echo "Downloading proxy list from ${PROXIES_DATA_URL}..."
ALL_PROXIES_JSON=$(curl -s "$PROXIES_DATA_URL")
if [ -z "$ALL_PROXIES_JSON" ]; then
    echo "Error: Could not download proxy file from ${PROXIES_DATA_URL} or file is empty."
    exit 1
fi

# Get the primary IP of the current X-UI server
CURRENT_SERVER_IP=$(hostname -I | awk '{print $1}')
echo "Current server IP: ${CURRENT_SERVER_IP}"

# Extract proxies relevant to this server from the JSON (assumes proxies_for_test.json has this server's IP)
SERVER_PROXIES=$(echo "$ALL_PROXIES_JSON" | jq --arg ip "$CURRENT_SERVER_IP" '.[] | select(.server_ip == $ip) | .proxies')

if [ "$(echo "$SERVER_PROXIES" | jq '. | length')" -eq 0 ]; then
    echo "Error: No proxies found for this server (${CURRENT_SERVER_IP}) in the JSON file."
    echo "Ensure the server's IP is correctly listed in the JSON and matches 'hostname -I | awk '{print \$1}'."
    exit 1
fi

echo "Proxies found for this server: (See next lines)"
echo "$SERVER_PROXIES" | jq '.'


# --- Modify Config Template based on selected proxies ---
echo "Modifying config template with new proxy details..."

# Convert SERVER_PROXIES JSON array to a shell array of JSON objects
readarray -t PROXY_OBJECTS <<<"$(echo "$SERVER_PROXIES" | jq -c '.[]')"

# Replace HA5-1 to HA5-5 outbounds with new proxy details
# This uses a series of jq updates, assuming HA5-X tags exist and are sequential.
MODIFIED_CONFIG_JSON="$CONFIG_JSON_CONTENT"

for i in $(seq 0 4); do # Loop for 0 to 4 to match array indices
    PROXY_JSON_OBJ="${PROXY_OBJECTS[$i]}"
    PROXY_TYPE=$(echo "$PROXY_JSON_OBJ" | jq -r '.type')
    PROXY_IP=$(echo "$PROXY_JSON_OBJ" | jq -r '.ip')
    PROXY_PORT=$(echo "$PROXY_JSON_OBJ" | jq -r '.port')
    PROXY_USER=$(echo "$PROXY_JSON_OBJ" | jq -r '.user')
    PROXY_PASS=$(echo "$PROXY_JSON_OBJ" | jq -r '.pass')
    TAG_TO_REPLACE="HA5-$((i + 1))" # HA5-1, HA5-2, ...

    USERS_JSON_PART=""
    if [ -n "$PROXY_USER" ] && [ -n "$PROXY_PASS" ]; then
        USERS_JSON_PART="{ \"user\": \"$PROXY_USER\", \"\"pass\": \"$PROXY_PASS\" }"
    fi

    # Update the existing outbound
    # This jq command uses --argjson to pass the new server details cleanly.
    MODIFIED_CONFIG_JSON=$(echo "$MODIFIED_CONFIG_JSON" | jq --arg tag "$TAG_TO_REPLACE" \
    --arg new_address "$PROXY_IP" \
    --argjson new_port "$PROXY_PORT" \
    --arg new_user "$PROXY_USER" \
    --arg new_pass "$PROXY_PASS" \
    '(.outbounds[] | select(.tag == $tag).settings.servers[0].address) = $new_address |
     (.outbounds[] | select(.tag == $tag).settings.servers[0].port) = $new_port |
     # Conditionally update users array, recreating it if needed
     if $new_user != "" and $new_pass != "" then
       (.outbounds[] | select(.tag == $tag).settings.servers[0].users) = [{"user": $new_user, "pass": $new_pass}]
     else
       (.outbounds[] | select(.tag == $tag).settings.servers[0] | del(.users))
     end
    ')'
done


# --- Backup existing Xray config on server ---
echo "Backing up existing Xray config on server: ${XRAY_CONFIG_PATH}.bak_$(date +%Y%m%d%H%M%S)"
cp "$XRAY_CONFIG_PATH" "${XRAY_CONFIG_PATH}.bak_$(date +%Y%m%d%H%M%S)"

# --- Save Modified Config to Server ---
echo "Saving modified config to ${XRAY_CONFIG_PATH}..."
echo "$MODIFIED_CONFIG_JSON" | jq '.' > "$XRAY_CONFIG_PATH" # Use jq '.' to re-format and validate before saving

echo "Xray config updated successfully."

# --- Restart X-UI Service ---
echo "Restarting X-UI service..."
systemctl restart "$XUI_SERVICE_NAME"
if systemctl is-active --quiet "$XUI_SERVICE_NAME"; then
    echo "X-UI service restarted successfully."
else
    echo "Error: X-UI service is not active after restart. Please check logs."
    exit 1
fi

echo "New proxies replaced in X-UI server."
